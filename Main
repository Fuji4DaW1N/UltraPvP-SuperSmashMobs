package ultrapvp.ssm;

import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Effect;
import org.bukkit.EntityEffect;
import org.bukkit.FireworkEffect;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.enchantments.EnchantmentWrapper;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Firework;
import org.bukkit.entity.Player;
import org.bukkit.entity.Zombie;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerToggleFlightEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.FireworkMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scoreboard.Scoreboard;
import org.bukkit.scoreboard.ScoreboardManager;
import org.bukkit.scoreboard.Team;
import org.bukkit.util.Vector;

public class Main extends JavaPlugin implements Listener {
	
	static ScoreboardManager scorem = Bukkit.getScoreboardManager();
	
	static Scoreboard board = scorem.getNewScoreboard();
	
	static Team spider = board.registerNewTeam("spider");
	
	@Override
	public void onEnable() {
		getServer().getPluginManager().registerEvents(this, this);
		getLogger().info("SuperSmashMobs has been enabled.  Depends on DisguiseCraft");
		
	}
	
	@Override
	public void onDisable() {
		getLogger().info("SuperSmashMobs has been disabled.");
	}

	@EventHandler
	public void drop(PlayerDropItemEvent e) {
		final Player p = e.getPlayer();
		e.setCancelled(true);
		p.sendMessage("§cSSM> You cannot drop items here.");
	}
	
	
	@SuppressWarnings("deprecation")
	@EventHandler 
	public void onDeath(PlayerDeathEvent e) {
		final Player p = e.getEntity();
		if (e.getEntity() instanceof Player) {
			e.getDrops().clear();
			p.setHealth(20);
			p.setFoodLevel(20);
			p.setGameMode(GameMode.SPECTATOR);
			p.sendMessage("§cSSM> You have died.  You will respawn in 5 seconds...");
			p.playEffect(p.getLocation(), Effect.PORTAL,500);
			p.getWorld().strikeLightningEffect(p.getLocation());
			
			Bukkit.getScheduler().scheduleSyncDelayedTask(this, new Runnable() {

				@Override
				public void run() {
					
					
					
					p.sendMessage("§aSSM> You have respawned.  Go get em! ;)");
					p.playEffect(p.getLocation(), Effect.HEART, 500);
					p.playSound(p.getLocation(), Sound.IRONGOLEM_HIT, 10, 2);
					p.setGameMode(GameMode.ADVENTURE);
						if (spider.hasPlayer(p)) {
							spiderClass(p);
						}

							try {
									final Location loc = p.getLocation();
									final Firework f = p.getLocation().getWorld()
											.spawn(loc, Firework.class);

									// f.getLocation().setX(p.getLocation().getX() +
									// (a*1000));
									FireworkMeta fm = f.getFireworkMeta();

									fm.addEffect(FireworkEffect.builder()

									.trail(true).with(FireworkEffect.Type.BURST)
											.with(FireworkEffect.Type.BALL)
											.with(FireworkEffect.Type.BALL_LARGE)
											.withColor(Color.GREEN).withColor(Color.YELLOW)
											.build());

									fm.setPower(0);
									f.setFireworkMeta(fm);
							} catch (Exception e) {
								Bukkit.getServer().broadcastMessage(e.toString());
							}
				
				}
			}, 100L);
		
		}
			
	}
	
	@EventHandler
	public void onPlayerDamage(EntityDamageEvent e){
	if(e.getEntity() instanceof Player){
			if(e.getCause() == DamageCause.FALL){
						e.setCancelled(true);
					}
			}
	
	}
	
	
	
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void onPlayerMove(PlayerMoveEvent event){
	Player p = event.getPlayer();
	if (p.getGameMode() != GameMode.SPECTATOR) {	
		
	
		if (p.isOnGround()) {
			p.playEffect(p.getLocation(), Effect.HAPPY_VILLAGER, 500);
			p.setAllowFlight(true);
		} else {
			if (!p.isOnGround()) {
				p.playEffect(p.getLocation(), Effect.VILLAGER_THUNDERCLOUD, 500);
			}
		}
	} else {
		
	}
	}
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void interact(PlayerInteractEvent e) {
		final Player p = e.getPlayer();
		if ((e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK) && 
				p.getItemInHand().getType() == Material.IRON_AXE) {
			
			if (p.hasPotionEffect(PotionEffectType.INVISIBILITY)) {
				p.sendMessage("§cSSM> You cannot use this for 5 seconds.");
			} else {
				if (!p.hasPotionEffect(PotionEffectType.INVISIBILITY)) {
					
					double radius = 3D;
					List<Entity> near = p.getLocation().getWorld().getEntities();
						for(Entity e1 : near) {
						    if(e1.getLocation().distance(p.getLocation()) <= radius) {
						        if (e1 instanceof Player) {
						        	((Player) e1).getPlayer().damage(3);
						        	p.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, 100, 10));
					}
						
					}
					}
					
					
					p.setVelocity(new Vector(0,2,0));
					p.addPotionEffect(new PotionEffect(PotionEffectType.INVISIBILITY, 100, 1));
					p.playEffect(p.getLocation(), Effect.EXPLOSION_HUGE, 500);
					p.playSound(p.getLocation(), Sound.EXPLODE, 100, 1);
					p.sendMessage("§aSSM> You used Hidden Leap.");
				
				}
				
			}
		
		}
				
			
	if ((e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK) && p.getItemInHand().getType() == Material.IRON_SWORD) {
		
		
		if (p.hasPotionEffect(PotionEffectType.SPEED)) {
			p.sendMessage("§cSSM> You cannot use this for 5 seconds...");
		} else {
			if (!p.hasPotionEffect(PotionEffectType.SPEED)) {
				p.sendMessage("§aSSM> You used Arrow Attack.");
				
				
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.shootArrow().setBounce(false);
				p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 100, 1));
			}
		}
	}
	}
	
	@EventHandler
	public void join(PlayerJoinEvent e) {
		final Player p = e.getPlayer();
		p.sendMessage("§aSSM> Welcome back.  Don't forget to choose a class by typing /classes.");
		p.setAllowFlight(true);
		p.playEffect(EntityEffect.WOLF_HEARTS);
		p.playSound(p.getLocation(), Sound.CHEST_OPEN, 10, 2);
	}
	
	@EventHandler
    public void onFlightAttempt(PlayerToggleFlightEvent event) {
		
	    final Player p = event.getPlayer();    
	       if (p.getGameMode() != GameMode.CREATIVE) {
	    	   p.playSound(p.getLocation(), Sound.IRONGOLEM_DEATH, 10, -10);
	    	   event.setCancelled(true);
	    	   p.setAllowFlight(false);
	    	   Vector v = p.getLocation().getDirection().multiply(1).setY(1);
	    	   p.setVelocity(v);
	       } else {
	    	   
	       }
	    	
   
    }
	
	public boolean onCommand(CommandSender s, Command cmd, String label, String[] args) {
		Player p = (Player) s;
		if (cmd.getName().equalsIgnoreCase("classes")) {
			p.sendMessage("§a--- §e[Classes] §a---");
			p.sendMessage("§a/Class Spider");
			return true;
		}
		if (cmd.getName().equalsIgnoreCase("class")) {
			if (args.length == 0) {
				p.sendMessage("§cSSM> Please type a kit!");
				return true;
			} else {
				if (args[0].equalsIgnoreCase("spider")) {
					spider.addPlayer(p);
					spiderClass(p);
					spider.setPrefix("§e[Spider] ");
					
					
					return true;
				}
			}
			
		} 
		return false;
	}

	@SuppressWarnings("deprecation")
	private void spiderClass(Player p) {
		p.performCommand("d spider");
		
		p.getInventory().clear();
		p.sendMessage("§aSSM> You have chosen the §e§lSPIDER§a.");
		p.setHealth(20);
		p.setFoodLevel(20);
		p.playSound(p.getLocation(), Sound.NOTE_PLING, 10, 2);
		p.playEffect(p.getLocation(), Effect.CLOUD, 500);
		
		
		
		
		
		ItemStack Sword = new ItemStack(Material.IRON_SWORD);
		ItemMeta im = Sword.getItemMeta();
		
		Enchantment unbreakingEnch = new EnchantmentWrapper(34);
		
		im.setDisplayName("§a§lSpider §e- §a§lRight-Click Hold");
		Sword.setItemMeta(im);

		p.getInventory().addItem(Sword);
		Sword.setDurability((short) 10);
		
		
		ItemStack Axe = new ItemStack(Material.IRON_AXE);
		ItemMeta im1 = Axe.getItemMeta();
							
		im1.setDisplayName("§a§lSpider §e- §a§lRight Click");
		Axe.setItemMeta(im1);
		Axe.addEnchantment(unbreakingEnch, 2);
		p.getInventory().addItem(Axe);
	}
	
}
